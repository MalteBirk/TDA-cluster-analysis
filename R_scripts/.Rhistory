figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tsv_file = paste("../python_scripts/",figure_name,".tsv", sep = "")
tree <- read.tree(paste("../python_scripts/",name, sep = ""))
plotted_tree = ggtree(tree) + geom_treescale() + geom_tiplab(size = 0.8)
ggsave(file=paste(result_path,figure_name,"_no_colours_identity_tree_Rfig",".png",sep = ""), plotted_tree, limitsize = FALSE)
}
# Maybe setenv for xml2
packages <- c("xml2","rvest","tidyverse", "BiocManager", "ggtree")
# Function to check whether package is installed
is.installed <- function(mypkg){
is.element(mypkg, installed.packages()[,1])
}
for(x in packages){
if(!is.element(x, installed.packages()[,1]))
{install.packages(x, repos="http://cran.fhcrc.org")
} else {print(paste(x, " library already installed"))}
}
library("tidyverse")
library("ggtree")
setwd(getwd())
# Saves all data frames and information about where to write PNG's
paste(getwd())
all_tree_files = list.files("../python_scripts", pattern = "_tree.wrangled")
all_tree_files_list = as.list(strsplit(all_tree_files, '\\s+'))
result_path <- readLines(paste("../python_scripts", "/R_information_file", sep = ""))
for (name in all_tree_files_list)
{
figure_name = strsplit(name, split = "_")
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tsv_file = paste("../python_scripts/",figure_name,".tsv", sep = "")
tipcategories = read.csv(tsv_file,
sep = "\t",
col.names = c("species", "genus_name", "operon"),
header = FALSE,
stringsAsFactors = FALSE)
dd = as.data.frame(tipcategories)
tree <- read.tree(paste("../python_scripts/",name, sep = ""))
plotted_tree = ggtree(tree) + geom_treescale()
combined_plot = plotted_tree %<+% dd +
geom_tiplab(aes(fill = factor(genus_name)),
size = 0.8,
linesize = 0.005,
color = "black", # color for label font
geom = "label",  # labels not text
label.padding = unit(0.0001, "lines"), # amount of padding around the labels
label.size = 0) + # size of label border
geom_tippoint(aes(shape = operon, color = operon), size = 0.3, position = "identity") +
guides(shape = guide_legend(override.aes = list(size = 5)))
ggsave(file=paste(result_path,figure_name,"_identity_tree_Rfig",".png",sep = ""), combined_plot, limitsize = FALSE)
}
all_tree_files = list.files("../python_scripts", pattern = "_tree.tree")
all_tree_files_list = as.list(strsplit(all_tree_files, '\\s+'))
result_path <- readLines(paste("../python_scripts", "/R_information_file", sep = ""))
for (name in all_tree_files_list)
{
figure_name = strsplit(name, split = "_")
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tsv_file = paste("../python_scripts/",figure_name,".tsv", sep = "")
tree <- read.tree(paste("../python_scripts/",name, sep = ""))
plotted_tree = ggtree(tree) + geom_treescale() + geom_tiplab(size = 0.8)
ggsave(file=paste(result_path,figure_name,"_no_colours_identity_tree_Rfig",".png",sep = ""), plotted_tree, limitsize = FALSE)
}
# Maybe setenv for xml2
packages <- c("xml2","rvest","tidyverse", "BiocManager", "ggtree")
# Function to check whether package is installed
is.installed <- function(mypkg){
is.element(mypkg, installed.packages()[,1])
}
for(x in packages){
if(!is.element(x, installed.packages()[,1]))
{install.packages(x, repos="http://cran.fhcrc.org")
} else {print(paste(x, " library already installed"))}
}
library("tidyverse")
library("ggtree")
setwd(getwd())
# Saves all data frames and information about where to write PNG's
paste(getwd())
all_tree_files = list.files("../python_scripts", pattern = "_tree.wrangled")
all_tree_files_list = as.list(strsplit(all_tree_files, '\\s+'))
result_path <- readLines(paste("../python_scripts", "/R_information_file", sep = ""))
for (name in all_tree_files_list)
{
figure_name = strsplit(name, split = "_")
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tsv_file = paste("../python_scripts/",figure_name,".tsv", sep = "")
tipcategories = read.csv(tsv_file,
sep = "\t",
col.names = c("species", "genus_name", "operon"),
header = FALSE,
stringsAsFactors = FALSE)
dd = as.data.frame(tipcategories)
tree <- read.tree(paste("../python_scripts/",name, sep = ""))
plotted_tree = ggtree(tree) + geom_treescale()
combined_plot = plotted_tree %<+% dd +
geom_tiplab(aes(fill = factor(genus_name)),
size = 0.8,
linesize = 0.005,
color = "black", # color for label font
geom = "label",  # labels not text
label.padding = unit(0.0001, "lines"), # amount of padding around the labels
label.size = 0) + # size of label border
geom_tippoint(aes(shape = operon, color = operon), size = 0.3, position = "identity") +
guides(shape = guide_legend(override.aes = list(size = 5)))
ggsave(file=paste(result_path,figure_name,"_identity_tree_Rfig",".png",sep = ""), combined_plot, limitsize = FALSE)
}
all_tree_files = list.files("../python_scripts", pattern = "_tree.tree")
all_tree_files_list = as.list(strsplit(all_tree_files, '\\s+'))
result_path <- readLines(paste("../python_scripts", "/R_information_file", sep = ""))
for (name in all_tree_files_list)
{
figure_name = strsplit(name, split = "_")
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tsv_file = paste("../python_scripts/",figure_name,".tsv", sep = "")
tree <- read.tree(paste("../python_scripts/",name, sep = ""))
plotted_tree = ggtree(tree) + geom_treescale() + geom_tiplab(size = 0.8)
ggsave(file=paste(result_path,figure_name,"_no_colours_identity_tree_Rfig",".png",sep = ""), plotted_tree, limitsize = FALSE)
}
# Maybe setenv for xml2
packages <- c("xml2","rvest","tidyverse", "BiocManager", "ggtree")
# Function to check whether package is installed
is.installed <- function(mypkg){
is.element(mypkg, installed.packages()[,1])
}
for(x in packages){
if(!is.element(x, installed.packages()[,1]))
{install.packages(x, repos="http://cran.fhcrc.org")
} else {print(paste(x, " library already installed"))}
}
library("tidyverse")
library("ggtree")
setwd(getwd())
# Saves all data frames and information about where to write PNG's
paste(getwd())
all_tree_files = list.files("../python_scripts", pattern = "_tree.wrangled")
all_tree_files_list = as.list(strsplit(all_tree_files, '\\s+'))
result_path <- readLines(paste("../python_scripts", "/R_information_file", sep = ""))
for (name in all_tree_files_list)
{
figure_name = strsplit(name, split = "_")
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tsv_file = paste("../python_scripts/",figure_name,".tsv", sep = "")
tipcategories = read.csv(tsv_file,
sep = "\t",
col.names = c("species", "genus_name", "operon"),
header = FALSE,
stringsAsFactors = FALSE)
dd = as.data.frame(tipcategories)
tree <- read.tree(paste("../python_scripts/",name, sep = ""))
plotted_tree = ggtree(tree) + geom_treescale()
combined_plot = plotted_tree %<+% dd +
geom_tiplab(aes(fill = factor(genus_name)),
size = 0.8,
linesize = 0.005,
color = "black", # color for label font
geom = "label",  # labels not text
label.padding = unit(0.0001, "lines"), # amount of padding around the labels
label.size = 0) + # size of label border
geom_tippoint(aes(shape = operon, color = operon), size = 0.3, position = "identity") +
guides(shape = guide_legend(override.aes = list(size = 5)))
ggsave(file=paste(result_path,figure_name,"_identity_tree_Rfig",".png",sep = ""), combined_plot, limitsize = FALSE)
}
all_tree_files = list.files("../python_scripts", pattern = "_tree.tree")
all_tree_files_list = as.list(strsplit(all_tree_files, '\\s+'))
result_path <- readLines(paste("../python_scripts", "/R_information_file", sep = ""))
for (name in all_tree_files_list)
{
figure_name = strsplit(name, split = "_")
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tsv_file = paste("../python_scripts/",figure_name,".tsv", sep = "")
tree <- read.tree(paste("../python_scripts/",name, sep = ""))
plotted_tree = ggtree(tree) + geom_treescale() + geom_tiplab(size = 0.8)
ggsave(file=paste(result_path,figure_name,"_no_colours_identity_tree_Rfig",".png",sep = ""), plotted_tree, limitsize = FALSE)
}
View(dd)
figure_name = strsplit(name, split = "_")
# Maybe setenv for xml2
packages <- c("xml2","rvest","tidyverse", "BiocManager", "ggtree")
# Function to check whether package is installed
is.installed <- function(mypkg){
is.element(mypkg, installed.packages()[,1])
}
for(x in packages){
if(!is.element(x, installed.packages()[,1]))
{install.packages(x, repos="http://cran.fhcrc.org")
} else {print(paste(x, " library already installed"))}
}
library("tidyverse")
library("ggtree")
setwd(getwd())
# Saves all data frames and information about where to write PNG's
paste(getwd())
all_tree_files = list.files("../python_scripts", pattern = "_tree.wrangled")
all_tree_files_list = as.list(strsplit(all_tree_files, '\\s+'))
result_path <- readLines(paste("../python_scripts", "/R_information_file", sep = ""))
figure_name = strsplit(name, split = "_")
for (name in all_tree_files_list)
figure_name = strsplit(name, split = "_")
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tsv_file = paste("../python_scripts/",figure_name,"KnownProducer.tsv", sep = "")
for (name in all_tree_files_list)
{
figure_name = strsplit(name, split = "_")
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tsv_file = paste("../python_scripts/",figure_name,"KnownProducer.tsv", sep = "")
tipcategories = read.csv(tsv_file,
sep = "\t",
col.names = c("species", "genus_name", "operon"),
header = FALSE,
stringsAsFactors = FALSE)
dd = as.data.frame(tipcategories)
tree <- read.tree(paste("../python_scripts/",name, sep = ""))
plotted_tree = ggtree(tree) + geom_treescale()
combined_plot = plotted_tree %<+% dd +
geom_tiplab(aes(fill = factor(genus_name)),
size = 0.8,
linesize = 0.005,
color = "black", # color for label font
geom = "label",  # labels not text
label.padding = unit(0.0001, "lines"), # amount of padding around the labels
label.size = 0) + # size of label border
geom_tippoint(aes(shape = operon, color = operon), size = 0.3, position = "identity") +
guides(shape = guide_legend(override.aes = list(size = 5)))
ggsave(file=paste(result_path,figure_name,"_identity_tree_Rfig",".png",sep = ""), combined_plot, limitsize = FALSE)
}
for (name in all_tree_files_list)
figure_name = strsplit(name, split = "_")
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tsv_file = paste("../python_scripts/",figure_name,"KnownProducer.tsv", sep = "")
tipcategories = read.csv(tsv_file,
sep = "\t",
col.names = c("species", "genus_name", "operon", "TDA-producer"),
header = FALSE,
stringsAsFactors = FALSE)
View(tipcategories)
tsv_file = paste("../python_scripts/",figure_name,"KnownProducer.tsv", sep = "")
tipcategories = read.csv(tsv_file,
sep = "\t",
col.names = c("species", "genus_name", "operon", "TDA-producer"),
header = FALSE,
stringsAsFactors = FALSE)
View(tipcategories)
dd = as.data.frame(tipcategories)
View(dd)
dd = as.data.frame(tipcategories)
rownames(dd)=dd$species
tsv_file = paste("../python_scripts/",figure_name,"KnownProducer.tsv", sep = "")
tipcategories = read.csv(tsv_file,
sep = "\t",
col.names = c("species", "genus_name", "operon", "TDA-producer"),
header = FALSE,
stringsAsFactors = FALSE)
dd = as.data.frame(tipcategories)
rownames(dd)=dd$species
tipcategories = read.csv(tsv_file,
sep = "\t",
col.names = c("species", "genus_name", "operon", "TDA-producer"),
header = FALSE,
stringsAsFactors = FALSE)
META = as.data.frame(tipcategories)
rownames(META)=META$species
tree <- read.tree(paste("../python_scripts/",name, sep = ""))
plotted_tree = ggtree(tree) + geom_treescale()
combined_plot = plotted_tree %<+% META +
geom_tiplab(aes(fill = factor(genus_name)),
size = 0.8,
linesize = 0.005,
color = "black", # color for label font
geom = "label",  # labels not text
label.padding = unit(0.0001, "lines"), # amount of padding around the labels
label.size = 0)
View(META)
gheatmap(combined_plot, META[,3,4],width = .1, offset = .1,
colnames=T, legend_title="Cluster")
gheatmap(combined_plot, META[,3,4, drop=F],width = .1, offset = .1,
colnames=T, legend_title="Cluster")
gheatmap(combined_plot, META[,3,4],width = .1, offset = .1,
colnames=T, legend_title="Cluster")
gheatmap(combined_plot, META[3,4],width = .1, offset = .1,
colnames=T, legend_title="Cluster")
gheatmap(combined_plot, META[[3,4]],width = .1, offset = .1,
colnames=T, legend_title="Cluster")
gheatmap(combined_plot, META[c(3,4)],width = .1, offset = .1,
colnames=T, legend_title="Cluster")
gheatmap(combined_plot, META[c(3,4)])
gheatmap(combined_plot, META[c(3,4)],width = .1, offset = .1,
colnames=T, legend_title="Cluster", color = "black")
gheatmap(combined_plot, META[c(3,4)],width = .1, offset = .1,
colnames=T, legend_title="Cluster", color = "black") +
scale_x_ggtree() +
scale_y_continuous(expand=c(0, 0.3))
gheatmap(combined_plot, META[c(3,4)],width = .1, offset = .1,
colnames=T, legend_title="Cluster", color = "black") +
scale_x_ggtree() +
scale_y_continuous(expand=c(0, 0.3))
ggsave(file=paste(result_path,figure_name,"heatmap_identity_tree_Rfig",".png",sep = ""), gheatmap, limitsize = FALSE)
gheatmap(combined_plot, META[c(3,4)],width = .1, offset = .1,
colnames=T, legend_title="Cluster", color = "black") +
scale_x_ggtree()
gheatmap(combined_plot, META[c(3,4)],width = .1, offset = 1,
colnames=T, legend_title="Cluster", color = "black") +
scale_x_ggtree()
gheatmap(combined_plot, META[c(3,4)],width = .1, offset = 1.1,
colnames=T, legend_title="Cluster", color = "black") +
scale_x_ggtree()
gheatmap(combined_plot, META[c(3,4)],width = .1, offset = 0.8,
colnames=T, legend_title="Cluster", color = "black") +
scale_x_ggtree()
ggsave(file=paste(result_path,figure_name,"heatmap_identity_tree_Rfig",".png",sep = ""), gheatmap, limitsize = FALSE)
heatmap_plot <- gheatmap(combined_plot, META[c(3,4)],width = .1, offset = 0.8,
colnames=T, legend_title="Cluster", color = "black") +
scale_x_ggtree()
ggsave(file=paste(result_path,figure_name,"heatmap_identity_tree_Rfig",".png",sep = ""), heatmap_plot, limitsize = FALSE)
ggsave(file=paste(result_path,figure_name,"_no_colours_identity_tree_Rfig",".png",sep = ""), plotted_tree, limitsize = FALSE, width = 8.31, height = 8.31)
ggsave(file=paste(result_path,figure_name,"_no_colours_identity_tree_Rfig",".png",sep = ""), plotted_tree, limitsize = FALSE, width = 8.31, height = 8.31)
ggsave(file=paste(result_path,figure_name,"_no_colours_identity_tree_Rfig",".png",sep = ""), plotted_tree, limitsize = FALSE, width = 8.31, height = 8.31)
heatmap_plot <- gheatmap(combined_plot, META[c(3,4)],width = .1, offset = 0.8,
colnames=T, legend_title="Cluster", color = "black") +
scale_x_ggtree()
ggsave(file=paste(result_path,figure_name,"heatmap_identity_tree_Rfig",".png",sep = ""), heatmap_plot, limitsize = FALSE, width = 8.31, height = 8.31)
# Maybe setenv for xml2
packages <- c("xml2","rvest","tidyverse", "BiocManager", "ggtree", "beeswarm")
# Function to check whether package is installed
is.installed <- function(mypkg){
is.element(mypkg, installed.packages()[,1])
}
for(x in packages){
if(!is.element(x, installed.packages()[,1]))
{install.packages(x, repos="http://cran.fhcrc.org")
} else {print(paste(x, " library already installed"))}
}
librart("beeswarm")
library("beeswarm")
# Identity plots
all_data_frames = list.files("../python_scripts", pattern = "_identity_operon_data_frame")
all_data_frames = as.list(strsplit(all_data_frames, '\\s+'))
for (name in all_data_frames)
{
beeswarm(name)
}
tipcategories = read.csv(name,
sep = "\t",
col.names = c("species", "genus_name", "identity", "operon"),
header = FALSE,
stringsAsFactors = FALSE)
for (name in all_data_frames)
{
tipcategories = read.csv(name,
sep = "\t",
col.names = c("species", "genus_name", "identity", "operon"),
header = FALSE,
stringsAsFactors = FALSE)
}
tipcategories = read.csv(paste("../python_scripts/",name, sep = ""),
sep = "\t",
col.names = c("species", "genus_name", "identity", "operon"),
header = FALSE,
stringsAsFactors = FALSE)
identity_frame = as.data.frame(tipcategories)
View(identity_frame)
beeswarm(identity_frame)
beeswarm(identity_frame[identity])
identity = identity_frame[identity]
identity = identity_frame["identity"]
View(identity)
beeswarm(identity)
library("ggbeeswarm")
# Maybe setenv for xml2
packages <- c("xml2","rvest","tidyverse", "BiocManager", "ggtree", "beeswarm", "ggbeeswarm", "ggplot2")
# Function to check whether package is installed
is.installed <- function(mypkg){
is.element(mypkg, installed.packages()[,1])
}
for(x in packages){
if(!is.element(x, installed.packages()[,1]))
{install.packages(x, repos="http://cran.fhcrc.org")
} else {print(paste(x, " library already installed"))}
}
#library("beeswarm")
library("ggbeeswarm")
library("ggplot2")
ggplot(identity_frame, aes(x = operon, y = identity)) +
geom_beeswarm()
tipcategories = read.csv(paste("../python_scripts/",name, sep = ""),
sep = "\t",
col.names = c("species", "genus_name", "identity", "operon"),
header = FALSE,
stringsAsFactors = FALSE)
identity_frame = as.data.frame(tipcategories)
ggplot(identity_frame, aes(x = operon, y = identity)) +
geom_beeswarm()
View(identity_frame)
for (name in all_data_frames)
{
figure_name = strsplit(name, split = "_")
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tipcategories = read.csv(paste("../python_scripts/",name, sep = ""),
sep = "\t",
col.names = c("species", "genus_name", "identity", "cluster"),
header = FALSE,
stringsAsFactors = FALSE)
identity_frame = as.data.frame(tipcategories)
#beeswarm(identity_frame["operon"] ~ identity_frame["identity"], pch = 19, corral = "wrap")
beeswarm = ggplot(identity_frame, aes(x = cluster, y = identity, color = genus_name)) +
geom_beeswarm(cex = 0.55) + ggtitle(figure_name)
ggsave(file=paste(path_to_figure_folder,figure_name,"_beeswarm",".png",sep = ""), beeswarm, limitsize = FALSE, width = 13, height = 8)
#identity = identity_frame["identity"]
#group = c("Complete")
#beeswarm(identity)
}
figure_name = strsplit(name, split = "_")
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tipcategories = read.csv(paste("../python_scripts/",name, sep = ""),
sep = "\t",
col.names = c("species", "genus_name", "identity", "cluster"),
header = FALSE,
stringsAsFactors = FALSE)
identity_frame = as.data.frame(tipcategories)
beeswarm = ggplot(identity_frame, aes(x = cluster, y = identity, color = genus_name)) +
geom_beeswarm(cex = 0.55) + ggtitle(figure_name)
beeswarm = ggplot(identity_frame, aes(x = cluster, y = identity, color = genus_name)) +
geom_beeswarm(cex = 0.55) + ggtitle(figure_name)
library("ggplot")
beeswarm = ggplot2(identity_frame, aes(x = cluster, y = identity, color = genus_name)) +
geom_beeswarm(cex = 0.55) + ggtitle(figure_name)
library("ggplot2")
library("tidyverse")
library("ggtree")
library("beeswarm")
library("ggbeeswarm")
library("ggplot2")
beeswarm = ggplot(identity_frame, aes(x = cluster, y = identity, color = genus_name)) +
geom_beeswarm(cex = 0.55) + ggtitle(figure_name)
for (name in all_data_frames)
{
figure_name = strsplit(name, split = "_")
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tipcategories = read.csv(paste("../python_scripts/",name, sep = ""),
sep = "\t",
col.names = c("species", "genus_name", "identity", "cluster"),
header = FALSE,
stringsAsFactors = FALSE)
identity_frame = as.data.frame(tipcategories)
#beeswarm(identity_frame["operon"] ~ identity_frame["identity"], pch = 19, corral = "wrap")
beeswarm = ggplot(identity_frame, aes(x = cluster, y = identity, color = genus_name)) +
geom_beeswarm(cex = 0.55) + ggtitle(figure_name)
ggsave(file=paste(path_to_figure_folder,figure_name,"_beeswarm",".png",sep = ""), beeswarm, limitsize = FALSE, width = 13, height = 8)
#identity = identity_frame["identity"]
#group = c("Complete")
#beeswarm(identity)
}
# Identity plots
all_data_frames = list.files("../python_scripts", pattern = "_identity_operon_data_frame")
all_data_frames = as.list(strsplit(all_data_frames, '\\s+'))
beeswarm_plots = strsplit(result_path, split = "/")
p = sapply(beeswarm_plots, function(x) x[1:4])
path_to_figure_folder = paste(p[1],p[2],p[3],p[4], sep="/")
path_to_figure_folder = paste(path_to_figure_folder,"/beeswarms/", sep = "")
dir.create(path_to_figure_folder)
for (name in all_data_frames)
{
figure_name = strsplit(name, split = "_")
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tipcategories = read.csv(paste("../python_scripts/",name, sep = ""),
sep = "\t",
col.names = c("species", "genus_name", "identity", "cluster"),
header = FALSE,
stringsAsFactors = FALSE)
identity_frame = as.data.frame(tipcategories)
#beeswarm(identity_frame["operon"] ~ identity_frame["identity"], pch = 19, corral = "wrap")
beeswarm = ggplot(identity_frame, aes(x = cluster, y = identity, color = genus_name)) +
geom_beeswarm(cex = 0.55) + ggtitle(figure_name)
ggsave(file=paste(path_to_figure_folder,figure_name,"_beeswarm",".png",sep = ""), beeswarm, limitsize = FALSE, width = 13, height = 8)
#identity = identity_frame["identity"]
#group = c("Complete")
#beeswarm(identity)
}
for (name in all_data_frames)
{
figure_name = strsplit(name, split = "_")
figure_name <- sapply(figure_name, function(x) x[1:2])
figure_name = figure_name[1]
tipcategories = read.csv(paste("../python_scripts/",name, sep = ""),
sep = "\t",
col.names = c("species", "genus_name", "BLAST_identity", "cluster"),
header = FALSE,
stringsAsFactors = FALSE)
identity_frame = as.data.frame(tipcategories)
#beeswarm(identity_frame["operon"] ~ identity_frame["identity"], pch = 19, corral = "wrap")
beeswarm = ggplot(identity_frame, aes(x = cluster, y = BLAST_identity, color = genus_name)) +
geom_beeswarm(cex = 0.55) + ggtitle(figure_name)
ggsave(file=paste(path_to_figure_folder,figure_name,"_beeswarm",".png",sep = ""), beeswarm, limitsize = FALSE, width = 13, height = 8)
#identity = identity_frame["identity"]
#group = c("Complete")
#beeswarm(identity)
}
